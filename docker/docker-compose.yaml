version: '3'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.6.3
  ports:
    - "8080:8080"
  volumes:
  - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
  - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
  - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
  - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  environment:
    - AIRFLOW__CORE__EXECUTOR = LocalExecutor
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN = ${PostgreSQL_URI}
    - AIRFLOW__CORE__LOAD_EXAMPLES = False

services:
# airflow 
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  spark:
    image: bitnami/spark:3.1.2
    ports:
      - "4040:4040"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IP=127.0.0.1
    depends_on:
      - postgres
    networks:
      - postgres-network

  postgres:
    image: postgres:15.3-alpine3.18
    environment:
      - POSTGRES_USER = ${POSTGRES_USER}
      - POSTGRES_PASSWORD = ${POSTGRES_PASSWORD}
      - POSTGRES_DB = ${POSTGRES_DB}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

  metabase:
    volumes:
      - /home/gregory/gregory/docker-data/:/metabase
      - ./metabase-data:/metabase-data
    environment:
      
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=${POSTGRES_DB}
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=${POSTGRES_USER}
      - MB_ENCRYPTION_SECRET_KEY = ${SECRET_KEY}
    ports:
      - 3000:3000
    image: metabase/metabase
    restart: always
    depends_on: 
      - postgres
    networks:
      - postgres-network


networks:
  postgres-network:
    driver: bridge

