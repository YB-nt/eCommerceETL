version: '3.8'

services:
  postgres:
    image: postgres:latest # PostgreSQL 컨테이너에 대한 이미지 지정.
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} # This will create the database if it does not exist.
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  

  webserver:
    build: ./airflow-docker
    restart: always
    depends_on:
      - postgres      
    ports :
      - "8080:8080"
    command : webserver 
    environment:
      - AIRFLOW__WEBSERVER__AUTHENTICATE=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    networks:
      - postgres-network
  
  spark-master:
    image: bitnami/spark:3.1.2
    user: root
    ports:
      - "8081:8081"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
        - postgres-network

  spark-worker:
    image: bitnami/spark:3.1.2
    user: root
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_HOST=spark-master
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master

    networks:
        - postgres-network
      
  metabase:
    volumes:
      - ./metabase-data:/metabase-data
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=${POSTGRES_DB}
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=${POSTGRES_USER}
      - MB_ENCRYPTION_SECRET_KEY = ${SECRET_KEY}
    ports:
      - 3000:3000
    image: metabase/metabase
    restart: always
    depends_on: 
      - postgres
    networks:
      - postgres-network

networks:
  postgres-network:
    driver: bridge
